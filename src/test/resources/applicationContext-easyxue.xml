<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="false" default-autowire="byName">

    <description>MyBatis-Shards Horizontal(easyxue) Sharding Demo</description>

    <context:component-scan base-package="cn.easyxue.mybatis.shards"/>


    <!-- shard dataSource config -->
    <bean id="shard_0" class="org.makersoft.shards.cfg.impl.ShardConfigurationImpl">
        <property name="shardId" value="0"/>
        <property name="dataSource" ref="lazyConnectionDataSource_1" />
    </bean>

    <bean id="shard_1" class="org.makersoft.shards.cfg.impl.ShardConfigurationImpl">
        <property name="shardId" value="1"/>
        <property name="dataSource" ref="lazyConnectionDataSource_2" />
    </bean>

    <bean id="shard_2" class="org.makersoft.shards.cfg.impl.ShardConfigurationImpl">
        <property name="shardId" value="2"/>
        <property name="dataSource" ref="lazyConnectionDataSource_3" />
    </bean>


    <!-- mybatis 配置-->
    <bean id="shardedSqlSessionFactory" class="org.makersoft.shards.spring.ShardedSqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:/easyxue/mybatis/mapper/**/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="cn.easyxue.mybatis.shards.domain"/>
        <property name="shardConfigurations">
            <array>
                <ref bean="shard_0"/>
                <ref bean="shard_1"/>
                <ref bean="shard_2"/>
            </array>
        </property>
        <property name="shardStrategyFactory">
            <bean class="cn.easyxue.mybatis.shards.CompanyShardStrategyFactory"/>
        </property>
        <property name="idGenerator">
            <bean class="org.makersoft.shards.id.uuid.ShardedUUIDGenerator"/>
        </property>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.easyxue.mybatis.shards.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="shardedSqlSessionFactory"/>
        <property name="annotationClass" value="org.makersoft.shards.annotation.MyBatisMapper"/>
    </bean>

    <!-- 事务配置 -->
    <!--    <bean id="transactionManager" class="org.springframework.data.transaction.ChainedTransactionManager">
        <property name="dataSources">
            <list>
                <ref local="lazyConnectionDataSource_1"/>
                <ref local="lazyConnectionDataSource_2"/>
                <ref local="lazyConnectionDataSource_3"/>
                <ref local="lazyConnectionDataSource_h2"/>
            </list>
        </property>
    </bean>-->
    
    <!-- 事务配置(spring分布式事务管理器) -->
    <bean id="transactionManager" class="org.springframework.data.transaction.ChainedTransactionManager">
        <constructor-arg>
            
            <list>
                <bean
                    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                    <property name="dataSource" ref="lazyConnectionDataSource_1" />
                </bean>
                <bean
                    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                    <property name="dataSource" ref="lazyConnectionDataSource_2" />
                </bean>
                <bean
                    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                    <property name="dataSource" ref="lazyConnectionDataSource_3" />
                </bean>
                <bean
                    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                    <property name="dataSource" ref="lazyConnectionDataSource_h2" />
                </bean>                
            </list>
        </constructor-arg>        
    </bean>

    <!-- 使用annotation定义事务
   <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    -->
    <!-- 定义受环境影响易变的变量 -->
    <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties"/>

    <!-- Simple连接池 -->
    <bean id="dataSource_1" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="url" value="${ds1.jdbc.url}"/>
        <property name="username" value="${ds1.jdbc.username}"/>
        <property name="password" value="${ds1.jdbc.password}"/>
    </bean>

    <bean id="dataSource_2" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="url" value="${ds2.jdbc.url}"/>
        <property name="username" value="${ds2.jdbc.username}"/>
        <property name="password" value="${ds2.jdbc.password}"/>
    </bean>

    <bean id="dataSource_3" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="url" value="${ds3.jdbc.url}"/>
        <property name="username" value="${ds3.jdbc.username}"/>
        <property name="password" value="${ds3.jdbc.password}"/>
    </bean>

    <!-- reduce data source -->
    <bean id="dataSource_h2" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${h2.jdbc.driver}"/>
        <property name="url" value="${h2.jdbc.url}"/>
        <property name="username" value="${h2.jdbc.username}"/>
        <property name="password" value="${h2.jdbc.password}"/>
    </bean>

    <!-- lazy connection data source proxy -->
    <bean id="lazyConnectionDataSource_1" name="name_1"
          class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="dataSource_1"/>
    </bean>

    <bean id="lazyConnectionDataSource_2" name="name_2"
          class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="dataSource_2"/>
    </bean>

    <bean id="lazyConnectionDataSource_3" name="name_3"
          class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="dataSource_3"/>
    </bean>

    <bean id="lazyConnectionDataSource_h2" name="name_h2"
          class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="dataSource_h2"/>
    </bean>

    <!-- 初始化数据表结构 -->
    <jdbc:initialize-database data-source="dataSource_1" ignore-failures="ALL">
        <jdbc:script location="classpath:/databases/sql/${db.type}/shards.schema.sql"/>
    </jdbc:initialize-database>

    <jdbc:initialize-database data-source="dataSource_2" ignore-failures="ALL">
        <jdbc:script location="classpath:/databases/sql/${db.type}/shards.schema.sql"/>
    </jdbc:initialize-database>

    <jdbc:initialize-database data-source="dataSource_3" ignore-failures="ALL">
        <jdbc:script location="classpath:/databases/sql/${db.type}/shards.schema.sql"/>
    </jdbc:initialize-database>
</beans>